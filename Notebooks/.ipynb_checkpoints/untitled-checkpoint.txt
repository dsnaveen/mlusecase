%matplotlib inline
import numpy as np
import pandas as pd
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

fdir = '/Users/naveenkumar/Dropbox/OnlineWork/Datasets/ElevatorProblem/'

ds = pd.read_csv(fdir + 'input.csv')
ds


def houroftheday(x):
    tmp = datetime.strptime(x, '%d-%m-%Y %H:%M:%S')
    return str(tmp.hour)
    
    
Floor_in_Access = ds[['Person_Id', 'Floor_in']]
Floor_out_Access = ds[['Person_Id', 'Floor_out']]

Floor_in_Access.rename(columns={'Floor_in':'Floor_id'}, inplace=True)
Floor_out_Access.rename(columns={'Floor_out':'Floor_id'}, inplace=True)

All_Floor_Accessed = pd.concat([Floor_in_Access, Floor_out_Access])

Unique_Floor_Accessed = All_Floor_Accessed.drop_duplicates(['Person_Id', 'Floor_id'])
Unique_floor_accessed_count = Unique_Floor_Accessed[['Person_Id', 'Floor_id']].groupby(['Person_Id'], as_index=False).count()
Unique_floor_accessed_count.rename(columns={'Floor_id':'NumUniqueFloorsAccessed'}, inplace=True)


#Total Journeys in odd hours/ Total Journeys


Hour Oddness Score

Ele_Access_Hours = ds[['Person_Id', 'Elevator_in_time']]
Ele_Access_Hours['Ele_Access_Hour'] = Ele_Access_Hours['Elevator_in_time'].apply(lambda col:houroftheday(col))
Ele_Access_Hours

Ele_Access_Hours_count = Ele_Access_Hours[['Person_Id', 'Ele_Access_Hour']].groupby(['Ele_Access_Hour'], as_index=False).count()
Ele_Access_Hours_count.rename(columns={'Person_Id':'NumTimeFloorAccessed'}, inplace=True)
Ele_Access_Hours_count['HourOddnessScore'] = np.power(Ele_Access_Hours_count['NumTimeFloorAccessed'].rank(ascending = False),1.5)


Ele_Access_Hours_Oddness = pd.merge(Ele_Access_Hours, Ele_Access_Hours_count[['Ele_Access_Hour', 'HourOddnessScore']], on='Ele_Access_Hour', how='left')
print Ele_Access_Hours_Oddness
HouseOddnessScore = Ele_Access_Hours_Oddness[['Person_Id', 'HourOddnessScore']].groupby(['Person_Id'], as_index=False).mean()
print HouseOddnessScore


